package com.project.god.controller;

import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.TreeSet;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.project.god.dao.CartDAO;
import com.project.god.domain.CartListVO;
import com.project.god.domain.CartVO;
import com.project.god.service.CartService;

import lombok.extern.slf4j.Slf4j;

/**
 * Product add cart
 * 
 * @author god
 *
 */

@Controller
@Slf4j
@RequestMapping("/products")
public class CartController {

	@Autowired
	private CartService cartService;
	
	@Autowired
	private CartDAO cartDAO;
	
	// 카트 리스트
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/cart.do", method=RequestMethod.GET)
	public String view(HttpSession session, Model model) throws Exception {
		
		log.info("########################## 카트 리스트");
		
		Map<String, Object> map = new HashMap<>();
		List<CartListVO> cartListVOList = null; // 인자 전달용
		NavigableSet<CartVO> cartList = new TreeSet<>(); // 세션
		
		String path = "";
				
		//String memberId = authentication.getName();
		
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		String notMember = "anonymousUser";
		
		if (principal instanceof UserDetails) {
			String memberId = ((UserDetails)principal).getUsername();
			
			if (memberId != notMember) {
				
				// DB에서 현황 가져오기
				// List<CartListVO> cartList = cartService.cartList(memberId);
				
				// cart session 가져오기
				if(session.getAttribute("CART_SESSION")!=null) { //
					
					try {
						cartList = (NavigableSet<CartVO>)session.getAttribute("CART_SESSION");
					} catch (ClassCastException e) {
						cartList.add((CartVO)session.getAttribute("CART_SESSION"));
					}
					
					// 기존수량
					for(CartVO c:cartList) {
						log.info("######## cart ####### : " +c);
						// log.info("######## 기존 수량 ####### : " +c.getCartQuan());
					}
					// NavigableSet<CartVO> -> List<CartListVO> 변환
					cartListVOList = cartService.cartList(memberId, cartList);
				}
				
				int cartSumPrice = 0;
				
				if (cartList!=null) {
					cartSumPrice = cartService.cartSumPrice(memberId);
				}
				
				log.info("cartList" + cartList);
				log.info("cartList 갯수 : " + cartList.size());
				log.info("cartListVOList 갯수 : " + cartListVOList.size());
				
				log.info("cartListVOList : "+cartListVOList.get(0)==null ? "없음" : "있음");
				
				model.addAttribute("cartSumPrice", cartSumPrice);
				
				if(cartListVOList.size()==1) {
					log.info("########### size = 1 :");
					model.addAttribute("cartVO", cartListVOList.get(0));
				}
				else if (cartListVOList.size()>=2) {
					log.info("########### size = 2 :");
					model.addAttribute("cartList", cartListVOList);					
				}
				path="/member/cart";
				
			} 
		} else {
			String memberId = principal.toString();
			
			log.info("memberId : " + memberId);
			
			if (memberId == notMember) {
				
				path="/member/login";
			}
		}
		return path;
		
	}
	
	// 카트에 담기
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/add_cart.do", method=RequestMethod.POST)
	public String addCart(@ModelAttribute CartVO cartVO, HttpSession session) throws Exception {
		
		log.info("############################## 카트 담기");
		
		// session collection
		NavigableSet<CartVO> carts = new TreeSet<>();
		
		CartVO tempCartVO = null;
		
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		String notMember = "anonymousUser";
		
		if (principal instanceof UserDetails) {
			String memberId = ((UserDetails)principal).getUsername();
			
			if (memberId != notMember) {
				cartVO.setMemberId(memberId);
				
				log.info("############ cartVO : "+cartVO);
				
				// cart 세션 생성
				if (session.getAttribute("CART_SESSION")!=null) { // cart 있을 때
					
					log.info("####### 카트 있을 때 ######");

					// cart table에 data 삽입
					cartService.addCart(cartVO);
					int currCartId = cartDAO.getCurrCartId();
					Date currDate = cartService.getCartByCartId(currCartId).getCartDate();
					
					
					try {
						carts = (NavigableSet<CartVO>)session.getAttribute("CART_SESSION");
						for(CartVO c : carts) {
							log.info("@@@@@@@@@@@@@@@@@ c @@@@@@@@@@ : "+c);
						}
					} catch (ClassCastException e) {
						// carts.add((CartVO)session.getAttribute("CART_SESSION"));
						log.info("********** cast Exception **********"); // 
						/////////////////////////////////////////////////////////
						// 카트에 1개 있을 때 추가할 경우 수량 중복 되는 경우 패치
						
						tempCartVO = (CartVO)session.getAttribute("CART_SESSION"); // 기존 카트
						
						log.info("********** tempCartVO ********** : " +tempCartVO); //
						
						carts = new TreeSet<>(); // 카트 초기화
						carts.add(tempCartVO);
						
						cartVO.setCartId(currCartId);
						cartVO.setCartDate(currDate);
						
						log.info("!!!!!!!!!! 변경 수량 !!!!!! : "+cartVO.getCartQuan());
						log.info("!!!!!!!!!! cartVO !!!!!! : "+cartVO);
						
						carts.add(cartVO);
						session.setAttribute("CART_SESSION", carts); // cart 세션 생성
						
						for(CartVO c : (NavigableSet<CartVO>)session.getAttribute("CART_SESSION")) {
							log.info("########## c ########## : " +c);
						}
						log.info("-------------------------------------------------------------------");
						
					} //try
					
				} // cart 세션 있을 때 끝 
				
				else { // cart 없을 때
					log.info("####### 카트 없을 때 ######");
					
					// cart table에 data 삽입
					cartService.addCart(cartVO);
					int currCartId = cartDAO.getCurrCartId();
					Date currDate = cartService.getCartByCartId(currCartId).getCartDate();
					
					cartVO.setCartId(currCartId);
					cartVO.setCartDate(currDate);
					session.setAttribute("CART_SESSION", cartVO);
					
					// try {
						// log.info("############# 카트에 여러 상품이 있을 경우 ###########");
						// carts = (NavigableSet<CartVO>)session.getAttribute("CART_SESSION");
						
					// } catch (ClassCastException e) {
						// tempCartVO = (CartVO)session.getAttribute("CART_SESSION");
//						tempCartVO.setCartId(currCartId);
//						tempCartVO.setCartDate(currDate);
//						carts.add(tempCartVO);
						carts.add((CartVO)session.getAttribute("CART_SESSION"));
					// }
				} // 
				
			} 
		} else {
			String memberId = principal.toString();
			
			if (memberId == notMember) {
				
				return "redirect:/login/login.do";
			}
		}
		log.info("########SESSION############");
		
		try {
			for(CartVO c : (NavigableSet<CartVO>)session.getAttribute("CART_SESSION")) {
				log.info("########## c ########## : " +c);
			}
		} catch (Exception e) {
			log.info("########## c ########## : " +(CartVO)session.getAttribute("CART_SESSION"));
		}
		
		
		return "redirect:/products/cart.do";
	}
	
	// 카트 삭제
	@RequestMapping("/delete_cart.do")
	public String deleteCart(@RequestParam int cartId) throws Exception {
		
		log.info("카트 삭제");
		
		cartService.deleteCart(cartId);
		
		return "redirect:/products/cart.do";
	}
	
	// 카트 비우기
	@RequestMapping("/delete_all_cart.do")
	public String deleteAllCart(Authentication authentication, HttpSession session) throws Exception {
		
		String memberId = authentication.getName();
		if (memberId != null) {
			cartService.deleteAllCart(memberId);
		}
		return "redirect:/products/cart.do";
	}
	
	// 카트 수정
	@RequestMapping(value="update_cart.do", method=RequestMethod.POST)
	public String updateCart(@ModelAttribute CartVO cartVO) throws Exception {
		
		log.info("카트 수정");
		
		log.info("cartVO : " + cartVO);
		
		cartService.updateCart(cartVO);
		
		return "redirect:/products/cart.do";
	}
	
	// 카트 수정 (ajax)
	@RequestMapping(value="cart_update_proc.do", method=RequestMethod.POST,
					produces = "text/plain; charset=UTF-8")
	@ResponseBody
	public String updateCartAjax(@RequestParam ("cart_id") int cartId,
								 @RequestParam ("cart_quan") int cartQuan, HttpSession session) throws Exception {
		
		log.info("################## 카트 수정 ajax #################");
		
		String msg = "";
		// session collection
		NavigableSet<CartVO> carts = new TreeSet<>(); // 세션
		
		CartVO cartVO = null;
		
		CartListVO cartListVO = null;
		
		log.info("cart_id : " + cartId);
		log.info("cart_quan : " + cartQuan);
		
		// cart 세션
		if (session.getAttribute("CART_SESSION")!=null) { // cart 비었을 때
			log.info(msg);
			log.info("###### 세션 상태 ###### : "+session.getAttribute("CART_SESSION"));
			// log.info("###### 세션 상태 ###### : "+(NavigableSet<CartVO>)session.getAttribute("CART_SESSION"));
			
			try {
				carts = (NavigableSet<CartVO>)session.getAttribute("CART_SESSION");
			} catch (ClassCastException e) {
				carts.add((CartVO)session.getAttribute("CART_SESSION"));
			}
			
			// cart 정보 가져오기
			cartListVO = cartService.getCartByCartId(cartId);
			cartListVO.setCartQuan(cartQuan); // 수량변경
			
			// 세션 변경
			cartVO = new CartVO(cartListVO);
			session.setAttribute("CART_SESSION", cartVO);
			
			// cart테이블 변경
			msg = cartService.updateCart(cartVO)==true ? "업데이트 성공" : "업데이트 실패";
			
		}
		return msg;
	}
}
