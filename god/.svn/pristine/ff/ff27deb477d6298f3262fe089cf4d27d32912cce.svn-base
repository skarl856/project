package com.project.god.service.impl;

import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import com.project.god.dao.OrderDAO;
import com.project.god.domain.OrderDetailVO;
import com.project.god.domain.OrderVO;
import com.project.god.domain.ProductVO;
import com.project.god.service.OrderService;

import lombok.extern.slf4j.Slf4j;

/**
 * Order ServiceImpl
 * 주문 서비스 구현 클래스
 * 
 * @author god
 *
 */

@Service
@Slf4j
public class OrderServiceImpl implements OrderService {

	@Autowired
	private OrderDAO orderDAO;
	
	@Autowired
	private DataSourceTransactionManager transactionManager;
	
	// 주문 정보
	@Override
	public void orderInfo(OrderVO orderVO) throws Exception {

		log.info("service orderInfo");
		
		orderDAO.orderInfo(orderVO);
	}

	// 주문 상세 정보
	@Override
	public void orderDetailInfo(OrderDetailVO orderDetailVO) throws Exception {

		log.info("service orderDetailInfo");
		
		orderDAO.orderDetailInfo(orderDetailVO);
	}

	// 주문 목록
	@Override
	public List<OrderDetailVO> orderList(String memberId) throws Exception {

		log.info("service orderList");
		
		log.info("OrderService.orderList");
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);
		
		List<OrderDetailVO> orders = null;
		
		try {
			orders = orderDAO.orderList(memberId);
			transactionManager.commit(status);

		} catch (Exception e) {
			transactionManager.rollback(status);
			log.error("OrderService.orderList : " + e.getMessage());
		}
		
		return orders;
	}
	
	@Override
	public List<OrderVO> getOrderList() throws Exception {
		
		log.info("OrderService.getOrderList");
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);
		
		List<OrderVO> orders = null;
		
		try {
			orders = orderDAO.getOrderList();
			transactionManager.commit(status);

		} catch (Exception e) {
			transactionManager.rollback(status);
			log.error("OrderService.getOrderList : " + e.getMessage());
		}
		
		return orders;
	}

	@Override
	public List<OrderDetailVO> getOrderView(String orderId) throws Exception {
		
		log.info("OrderService.getOrderView");
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);
		
		List<OrderDetailVO> orders = null;
		
		try {
			orders = orderDAO.getOrderView(orderId);
			transactionManager.commit(status);

		} catch (Exception e) {
			transactionManager.rollback(status);
			log.error("OrderService.getOrderView : " + e.getMessage());
		}
		
		log.info("######OrderService orders:"+orders);
		log.info("####### orderId:"+orderId);
		
		return orders;
	}

	@Override
	@Transactional(readOnly=true)
	public void delivery(OrderVO orderVO)throws Exception {
		
		log.info("OrderService.delivery");
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);

		log.info("########### orderVO:"+orderVO);
		try {
			orderDAO.delivery(orderVO);
			transactionManager.commit(status);

		} catch (Exception e) {
			transactionManager.rollback(status);
			log.error("OrderService.delivery : " + e.getMessage());
		}
		
	}

	@Override
	@Transactional(readOnly=true)
	public void productQuan(ProductVO productVO) throws Exception {
		
		log.info("OrderService.productQuan");
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);

		log.info("########### productVO:"+productVO);
		try {
			orderDAO.productQuan(productVO);
			transactionManager.commit(status);

		} catch (Exception e) {
			transactionManager.rollback(status);
			log.error("OrderService.productQuan : " + e.getMessage());
		}
	}

	// 주문 아이디 생성
	@Override
	public String generateOrderId() throws Exception {

		log.info("OrderService.generateOrderId");
		
		String orderId = "";
		
		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		String ym = year + new DecimalFormat("00").format(cal.get(Calendar.MONTH) + 1);
		String ymd = ym + new DecimalFormat("00").format(cal.get(Calendar.DATE));
		String subNum = "";
		
		for(int i=1; i<=6; i++) {
			subNum += (int)(Math.random() * 10);
		}
		
		orderId = ymd + "_" + subNum;
		
		return orderId;
		
	}

}
