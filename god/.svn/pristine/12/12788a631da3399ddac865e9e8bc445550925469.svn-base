package com.project.god.dao;

import java.security.Provider.Service;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.project.god.domain.MemberVO;
import com.project.god.domain.RoleVO;
import com.project.god.domain.SearchMemberVO;

import lombok.extern.slf4j.Slf4j;

/**
 * Member DAOImpl
 * 회원관리 DAO 구현 클래스
 * 
 * @author god
 *
 */

@Repository
@Slf4j
public class MemberDAOImpl implements MemberDAO {

	@Autowired
	private SqlSession sqlSession;
 
	@Override
	public void insertMember(MemberVO memberVO) throws Exception {
		
		log.info("MemberDAO.insertMember");
		sqlSession.insert("mapper.Member.insertMember", memberVO);
	}
	
	@Override
	public void insertRole(RoleVO roleVO) throws Exception {
		
		log.info("MemberDAO.insertRole");
		sqlSession.insert("mapper.Member.insertRole", roleVO);
	}
	
	@Override
	public List<MemberVO> getAllMembers() {
		
		log.info("MemberDAO.getAllMembers");
		return sqlSession.selectList("mapper.Member.getAllMembers");
	}

	@Override
	public MemberVO getMember(String memberId) {
		
		log.info("MemberDAO.getMember");
		return sqlSession.selectOne("mapper.Member.getMember", memberId);
	}

	@Override
	public int getRowCount(String sql) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isMember(String memberId) throws Exception {
		
		log.info("MemberDAO.isMember");		  
		return (int)sqlSession.selectOne("mapper.Member.isMember", memberId)==1 ? true:false;
	}

	@Override
	public boolean isEnableEmail(String email) throws Exception {
		
		log.info("MemberDAO.isEnableEmail");
		return (int)sqlSession.selectOne("mapper.Member.isEnableEmailByEmail", email)==1? true:false;
	}
	
	@Override
	public boolean isEnableEmail(String id, String email) throws Exception {
		
		log.info("MemberDAO.isEnableEmail");
		MemberVO memberVO = new MemberVO();
		memberVO.setMemberId(id);
		memberVO.setMemberEmail(email);
		
		log.info("DAO memberVO :"+memberVO);
		
		return ((int)sqlSession.selectOne("mapper.Member.isEnableEmailByIdAndEmail", memberVO))==0 ? true:false;
	}

	@Override
	public boolean isEnableCellphone(String cellphone) throws Exception {
		
		log.info("MemberDAO.isEnableCellphone");
		return (int)sqlSession.selectOne("mapper.Member.isEnableCellphone", cellphone)==1? true:false;	
	}

	@Override
	public boolean isEnableCellphone(String id, String cellphone) throws Exception {
		
		log.info("MemberDAO.isEnableCellphone");
		MemberVO memberVO = new MemberVO();
		memberVO.setMemberId(id);
		memberVO.setMemberCellphone(cellphone);
		
		return ((int)sqlSession.selectOne("mapper.Member.isEnableCellphoneByIdAndCellphone", memberVO))==0? true:false;	
	}

	@Override
	public void updateMember(MemberVO memberVO) throws Exception {
		
		log.info("memberDAO.updateMember");
		sqlSession.update("mapper.Member.updateMember", memberVO);
		
	}

	@Override
	public void deleteMember(String memberId) throws Exception {
		log.info("memberDAO.deleteMember");
		sqlSession.delete("mapper.Member.deleteMember", memberId);
	}

	@Override
	public void deleteMember_role(String memberId) throws Exception {
		log.info("memberDAO.deleteMember_role");
		sqlSession.delete("mapper.Member.deleteMember_role", memberId);
	}

	@Override
	public MemberVO getMemberIdByInfo(String name, String searchField, String searchValue) throws Exception {
		log.info("memberDAO.getMemberIdByInfo");
		
		SearchMemberVO searchMemberVO = new SearchMemberVO();
		searchMemberVO.setMemberName(name);
		searchMemberVO.setSearchValue(searchValue);
		searchMemberVO.setSearchField(searchField);
		
		return sqlSession.selectOne("mapper.Member.getMemberIdByInfo", searchMemberVO);
	}

	@Override
	public boolean getMemberPwByInfo(String id, String name, String searchField, String searchValue) throws Exception {
		log.info("memberDAO.getMemberPwByInfo");
		
		SearchMemberVO searchMemberVO = new SearchMemberVO();
		
		searchMemberVO.setMemberId(id);
		searchMemberVO.setMemberName(name);
		searchMemberVO.setSearchValue(searchValue);
		searchMemberVO.setSearchField(searchField);
		
		return ((int)sqlSession.selectOne("mapper.Member.getMemberPwByInfo", searchMemberVO))==1? true: false;
	}

}
