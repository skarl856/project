package com.project.god.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import com.project.god.dao.ProductDAO;
import com.project.god.domain.CategoryVO;
import com.project.god.domain.ProductVO;
import com.project.god.service.ProductService;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class ProductServiceImpl implements ProductService {
	
	@Autowired
	ProductDAO productDAO;
	
	/*
	 * 트랜잭션 매니저(transactionManager)를 직접 와이어링 하거나  
	 * 트랜잭션 템플릿(transactionTemplate)을 와이어링 하는 방식 둘 중 하나를 사용하여 
	 * 트랜잭션 제어 프로그래밍을 할 수 있습니다. 
	 */
	
	@Autowired
    private DataSourceTransactionManager transactionManager;
	
	// 플래그 변수를 익명 클래스 메서드 안에 등록하는 에러나는 부분을 패치 -> 멤버 변수화 
	private boolean flag = false;
	
	// Product 상품 등록
	@Override
	public void regiProduct(ProductVO productVO) throws Exception {
		
		log.info("Service regiProduct");

        productDAO.regiProduct(productVO);
		
	}

	@Override
	public int getProductIdByLastSeq() {

		log.info("Service getProductIdByLastSeq");
		
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);
		
		int result = 0;
		
		try {
				result = productDAO.getProductIdByLastSeq();
				transactionManager.commit(status);
				
		} catch(Exception e) {
			transactionManager.rollback(status);
	        log.error("Service getProductIdByLastSeq Exception : " + e.getMessage());
		}
		
		return result;	
	}
	
	// 상품 리스트
	@Override
	public List<ProductVO> getProductList(int page, int rowsPerPage) {
		
		log.info("Service getProductList");
		
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);
		
		List<ProductVO> productList = null;
		log.info("rowsPerPage :"+rowsPerPage);
		
		try {
			log.info("rowsPerPage :"+rowsPerPage);
			productList = productDAO.getProductList(page, rowsPerPage);
			transactionManager.commit(status);
				
		} catch(Exception e) {
			transactionManager.rollback(status);
	        log.error("Service getProductList Exception : " + e.getMessage());
		}
		
		return productList;
	}
	
	// 상품 보기
	@Override
	public ProductVO getProduct(int productId) throws Exception {
		
		log.info("Service getProduct");
		return productDAO.getProduct(productId);
	}
	
	// 전체 상품 수
	@Override
	public int getProductListCount() {
		
		log.info("Service getProductListCount");
		
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);
		
		int result = 0;
		
		try {
			result = productDAO.getProductListCount();
			transactionManager.commit(status);
				
		} catch(Exception e) {
	        transactionManager.rollback(status);
	        log.error("Service getFaqListCount Exception : " + e.getMessage());
	    }
		log.info("productDAO.getProductListCount() : " + productDAO.getProductListCount());
		return result;
	}
	
	@Override
	public List<ProductVO> getProductBySearch(String searchKind, 
									  		  String searchWord, 
									  		  int rowsPerPage, 
									  		  int page) {
		log.info("Service getProductBySearch");
		
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);
		
		List<ProductVO> result = null;
		
		try {
			result = productDAO.getProductBySearch(searchKind, searchWord, rowsPerPage, page);
			transactionManager.commit(status);
				
		} catch(Exception e) {
			transactionManager.rollback(status);
	        log.error("Service getFaqBySearch Exception : " + e.getMessage());
		}
		
		return result;
	} //

	
	@Override
	public int getAllProductsBySearch(String searchKind, String searchWord) {
		
		log.info("Service getAllProductsBySearch");
		
		TransactionDefinition def = new DefaultTransactionDefinition();
		TransactionStatus status = transactionManager.getTransaction(def);
		
		int result = 0;
		
		try {
			result = productDAO.getAllProductsBySearch(searchKind, searchWord);
			transactionManager.commit(status);
				
		} catch(Exception e) {
			transactionManager.rollback(status);
	        log.error("Service getFaqBySearch Exception : " + e.getMessage());
		}
		
		return result;
	}
	
	// 카테고리 목록
	@Override
	public List<CategoryVO> getCategoryList() throws Exception {

		log.info("Service getCategoryList");
		
		return productDAO.getCategoryList();
	}
	
	// 카테고리 등록
	@Override
	public boolean insertCategory(final ProductVO productVO) {
		
		log.info("Service insertCategory");
		
		DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
 
        TransactionStatus status = transactionManager.getTransaction(def);
        
        try {
            flag = productDAO.insertCategory(productVO);
            
            if (flag == true) {
            	transactionManager.commit(status);
            } else {
            	throw new Exception();
            }
                
        } catch (Exception e) {
        	
            transactionManager.rollback(status);
            flag = false;
            e.printStackTrace();            
        }
        
        return flag;
	}
	
	// 카테고리 삭제
	@Override
	public void deleteCategory(String productKind2) throws Exception {

		log.info("Service deleteCategory");

		productDAO.deleteCategory(productKind2);
	}

}
